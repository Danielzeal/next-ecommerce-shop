// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  order         Order[]
  accounts      Account[]
  sessions      Session[]
  review        Review[]
  product       Product[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  amount          Float
  currency        String
  paymentIntentId String   @unique
  products        Json[]
  status          String?  @default("pending")
  deliveryStatus  String?  @default("pending")
  user            User     @relation(fields: [userEmail], references: [email])
  userEmail       String
  address         Json?
}

model Product {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  description String
  img         String?
  price       Float
  rating      Float    @default(0)
  numReview   Int      @default(0)
  sizes       String[]
  reviews     Review[]
  category    Category @relation(fields: [catName], references: [name], onDelete: Cascade)
  catName     String
  user        User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail   String
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  rating    Float    @default(0)
  user      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String
  comment   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Category {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  products  Product[]
}
